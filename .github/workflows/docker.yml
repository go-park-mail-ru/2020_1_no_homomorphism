name: Docker Build

on:
  push:
    branches:
      - master
      - dev
      - deploy
      - lint+deploy
  pull_request:
    branches: [ master ]

jobs:
  golangci-main:
    name: lint-main
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v1
      - name: golangci-lint
        uses: reviewdog/action-golangci-lint@v1
        with:
          golangci_lint_flags: "--config=.github/.golangci.yml"
          workdir: main/
  golangci-sessions:
    name: lint-sessions
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v1
      - name: golangci-lint
        uses: reviewdog/action-golangci-lint@v1
        with:
          golangci_lint_flags: "--config=.github/.golangci.yml"
          workdir: sessions/
  golangci-fileserver:
    name: lint-fileserver
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v1
      - name: golangci-lint
        uses: reviewdog/action-golangci-lint@v1
        with:
          golangci_lint_flags: "--config=.github/.golangci.yml"
          workdir: fileserver/
  test:
    name: tests
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.14.x'
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Main Service Test
        run: cd main/ && go test ./...
      - name: Session Service Test
        run: cd sessions/ && go test ./...
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Login to DockerHub Registry
        run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
      - name: Build Docker image
        run: sudo docker build -t bulletmys/music_app_main:${GITHUB_SHA::8} -f main/Dockerfile . &&
          sudo docker build -t bulletmys/music_app_fileserver:${GITHUB_SHA::8} -f sessions/Dockerfile . &&
          sudo docker build -t bulletmys/music_app_sessions:${GITHUB_SHA::8} -f fileserver/Dockerfile .
      - name: Push the image
        run: docker push bulletmys/music_app_main:${GITHUB_SHA::8} &&
          docker push bulletmys/music_app_fileserver:${GITHUB_SHA::8} &&
          docker push bulletmys/music_app_sessions:${GITHUB_SHA::8}
      - name: Upload docker-compose file
        uses: actions/upload-artifact@v1
        with:
          name: compose
          path: docker-compose.yml

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download docker-compose file
        uses: actions/download-artifact@v1
        with:
          name: compose
      - name: Transfer docker-compose file to server
        uses: appleboy/scp-action@v0.0.10
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          source: "compose/docker-compose.yml"
          target: "/home/ubuntu/backend/2020_1_no_homomorphism/"
      - name: pull docker images
        uses: appleboy/ssh-action@master
        with:
          envs: GITHUB_SHA
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: sudo docker pull bulletmys/music_app_main:${GITHUB_SHA::8} &&
            sudo docker pull bulletmys/music_app_sessions:${GITHUB_SHA::8} &&
            sudo docker pull bulletmys/music_app_fileserver:${GITHUB_SHA::8}
      - name: deploy docker images
        uses: appleboy/ssh-action@master
        with:
          envs: GITHUB_SHA
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            sudo docker rm -f $(sudo docker ps -aq)
            export MUSIC_APP_VERSION=${GITHUB_SHA::8}
            sudo docker-compose -f backend/2020_1_no_homomorphism/docker-compose.yml up -d