// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package album is a generated GoMock package.
package album

import (
	models "github.com/2020_1_no_homomorphism/no_homo_main/internal/pkg/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetUserAlbums mocks base method
func (m *MockRepository) GetUserAlbums(uId string) ([]models.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAlbums", uId)
	ret0, _ := ret[0].([]models.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAlbums indicates an expected call of GetUserAlbums
func (mr *MockRepositoryMockRecorder) GetUserAlbums(uId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAlbums", reflect.TypeOf((*MockRepository)(nil).GetUserAlbums), uId)
}

// GetAlbumById mocks base method
func (m *MockRepository) GetAlbumById(aId string) (models.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbumById", aId)
	ret0, _ := ret[0].(models.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbumById indicates an expected call of GetAlbumById
func (mr *MockRepositoryMockRecorder) GetAlbumById(aId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbumById", reflect.TypeOf((*MockRepository)(nil).GetAlbumById), aId)
}

// GetBoundedAlbumsByArtistId mocks base method
func (m *MockRepository) GetBoundedAlbumsByArtistId(id string, start, end uint64) ([]models.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoundedAlbumsByArtistId", id, start, end)
	ret0, _ := ret[0].([]models.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoundedAlbumsByArtistId indicates an expected call of GetBoundedAlbumsByArtistId
func (mr *MockRepositoryMockRecorder) GetBoundedAlbumsByArtistId(id, start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoundedAlbumsByArtistId", reflect.TypeOf((*MockRepository)(nil).GetBoundedAlbumsByArtistId), id, start, end)
}

// Search mocks base method
func (m *MockRepository) Search(text string, count uint) ([]models.AlbumSearch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", text, count)
	ret0, _ := ret[0].([]models.AlbumSearch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockRepositoryMockRecorder) Search(text, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockRepository)(nil).Search), text, count)
}

// RateAlbum mocks base method
func (m *MockRepository) RateAlbum(aID, uID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RateAlbum", aID, uID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RateAlbum indicates an expected call of RateAlbum
func (mr *MockRepositoryMockRecorder) RateAlbum(aID, uID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RateAlbum", reflect.TypeOf((*MockRepository)(nil).RateAlbum), aID, uID)
}

// CheckLike mocks base method
func (m *MockRepository) CheckLike(aID, uID string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckLike", aID, uID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckLike indicates an expected call of CheckLike
func (mr *MockRepositoryMockRecorder) CheckLike(aID, uID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLike", reflect.TypeOf((*MockRepository)(nil).CheckLike), aID, uID)
}
