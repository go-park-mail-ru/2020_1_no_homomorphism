// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package track is a generated GoMock package.
package track

import (
	models "github.com/2020_1_no_homomorphism/no_homo_main/internal/pkg/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetTrackById mocks base method
func (m *MockRepository) GetTrackById(id string) (models.Track, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrackById", id)
	ret0, _ := ret[0].(models.Track)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrackById indicates an expected call of GetTrackById
func (mr *MockRepositoryMockRecorder) GetTrackById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrackById", reflect.TypeOf((*MockRepository)(nil).GetTrackById), id)
}

// GetBoundedTracksByPlaylistId mocks base method
func (m *MockRepository) GetBoundedTracksByPlaylistId(plId string, start, end uint64) ([]models.Track, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoundedTracksByPlaylistId", plId, start, end)
	ret0, _ := ret[0].([]models.Track)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoundedTracksByPlaylistId indicates an expected call of GetBoundedTracksByPlaylistId
func (mr *MockRepositoryMockRecorder) GetBoundedTracksByPlaylistId(plId, start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoundedTracksByPlaylistId", reflect.TypeOf((*MockRepository)(nil).GetBoundedTracksByPlaylistId), plId, start, end)
}

// GetBoundedTracksByAlbumId mocks base method
func (m *MockRepository) GetBoundedTracksByAlbumId(aId string, start, end uint64) ([]models.Track, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoundedTracksByAlbumId", aId, start, end)
	ret0, _ := ret[0].([]models.Track)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoundedTracksByAlbumId indicates an expected call of GetBoundedTracksByAlbumId
func (mr *MockRepositoryMockRecorder) GetBoundedTracksByAlbumId(aId, start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoundedTracksByAlbumId", reflect.TypeOf((*MockRepository)(nil).GetBoundedTracksByAlbumId), aId, start, end)
}

// GetBoundedTracksByArtistId mocks base method
func (m *MockRepository) GetBoundedTracksByArtistId(id string, start, end uint64) ([]models.Track, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoundedTracksByArtistId", id, start, end)
	ret0, _ := ret[0].([]models.Track)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoundedTracksByArtistId indicates an expected call of GetBoundedTracksByArtistId
func (mr *MockRepositoryMockRecorder) GetBoundedTracksByArtistId(id, start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoundedTracksByArtistId", reflect.TypeOf((*MockRepository)(nil).GetBoundedTracksByArtistId), id, start, end)
}

// Search mocks base method
func (m *MockRepository) Search(text string, count uint) ([]models.TrackSearch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", text, count)
	ret0, _ := ret[0].([]models.TrackSearch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockRepositoryMockRecorder) Search(text, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockRepository)(nil).Search), text, count)
}
