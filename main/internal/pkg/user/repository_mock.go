// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package user is a generated GoMock package.
package user

import (
	models "github.com/2020_1_no_homomorphism/no_homo_main/internal/pkg/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockRepository) Create(user models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockRepositoryMockRecorder) Create(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), user)
}

// Update mocks base method
func (m *MockRepository) Update(user models.User, input models.UserSettings) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", user, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockRepositoryMockRecorder) Update(user, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), user, input)
}

// UpdateAvatar mocks base method
func (m *MockRepository) UpdateAvatar(user models.User, avatarDir, fileType string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAvatar", user, avatarDir, fileType)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAvatar indicates an expected call of UpdateAvatar
func (mr *MockRepositoryMockRecorder) UpdateAvatar(user, avatarDir, fileType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAvatar", reflect.TypeOf((*MockRepository)(nil).UpdateAvatar), user, avatarDir, fileType)
}

// GetUserByLogin mocks base method
func (m *MockRepository) GetUserByLogin(login string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByLogin", login)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByLogin indicates an expected call of GetUserByLogin
func (mr *MockRepositoryMockRecorder) GetUserByLogin(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByLogin", reflect.TypeOf((*MockRepository)(nil).GetUserByLogin), login)
}

// CheckIfExists mocks base method
func (m *MockRepository) CheckIfExists(login, email string) (bool, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfExists", login, email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckIfExists indicates an expected call of CheckIfExists
func (mr *MockRepositoryMockRecorder) CheckIfExists(login, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfExists", reflect.TypeOf((*MockRepository)(nil).CheckIfExists), login, email)
}

// CheckUserPassword mocks base method
func (m *MockRepository) CheckUserPassword(userPassword, inputPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserPassword", userPassword, inputPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckUserPassword indicates an expected call of CheckUserPassword
func (mr *MockRepositoryMockRecorder) CheckUserPassword(userPassword, inputPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserPassword", reflect.TypeOf((*MockRepository)(nil).CheckUserPassword), userPassword, inputPassword)
}

// GetUserStat mocks base method
func (m *MockRepository) GetUserStat(id string) (models.UserStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserStat", id)
	ret0, _ := ret[0].(models.UserStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserStat indicates an expected call of GetUserStat
func (mr *MockRepositoryMockRecorder) GetUserStat(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserStat", reflect.TypeOf((*MockRepository)(nil).GetUserStat), id)
}
