// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package artist is a generated GoMock package.
package artist

import (
	models "github.com/2020_1_no_homomorphism/no_homo_main/internal/pkg/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUseCase is a mock of UseCase interface
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// GetArtistById mocks base method
func (m *MockUseCase) GetArtistById(id string) (models.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistById", id)
	ret0, _ := ret[0].(models.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistById indicates an expected call of GetArtistById
func (mr *MockUseCaseMockRecorder) GetArtistById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistById", reflect.TypeOf((*MockUseCase)(nil).GetArtistById), id)
}

// GetBoundedArtists mocks base method
func (m *MockUseCase) GetBoundedArtists(start, end uint64) ([]models.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoundedArtists", start, end)
	ret0, _ := ret[0].([]models.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoundedArtists indicates an expected call of GetBoundedArtists
func (mr *MockUseCaseMockRecorder) GetBoundedArtists(start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoundedArtists", reflect.TypeOf((*MockUseCase)(nil).GetBoundedArtists), start, end)
}

// GetArtistStat mocks base method
func (m *MockUseCase) GetArtistStat(id string) (models.ArtistStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistStat", id)
	ret0, _ := ret[0].(models.ArtistStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistStat indicates an expected call of GetArtistStat
func (mr *MockUseCaseMockRecorder) GetArtistStat(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistStat", reflect.TypeOf((*MockUseCase)(nil).GetArtistStat), id)
}

// Search mocks base method
func (m *MockUseCase) Search(text string, count uint) ([]models.ArtistSearch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", text, count)
	ret0, _ := ret[0].([]models.ArtistSearch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockUseCaseMockRecorder) Search(text, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockUseCase)(nil).Search), text, count)
}
