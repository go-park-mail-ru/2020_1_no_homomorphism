// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package artist is a generated GoMock package.
package artist

import (
	models "github.com/2020_1_no_homomorphism/no_homo_main/internal/pkg/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetArtist mocks base method
func (m *MockRepository) GetArtist(id string) (models.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtist", id)
	ret0, _ := ret[0].(models.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtist indicates an expected call of GetArtist
func (mr *MockRepositoryMockRecorder) GetArtist(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtist", reflect.TypeOf((*MockRepository)(nil).GetArtist), id)
}

// GetBoundedArtists mocks base method
func (m *MockRepository) GetBoundedArtists(start, end uint64) ([]models.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoundedArtists", start, end)
	ret0, _ := ret[0].([]models.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoundedArtists indicates an expected call of GetBoundedArtists
func (mr *MockRepositoryMockRecorder) GetBoundedArtists(start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoundedArtists", reflect.TypeOf((*MockRepository)(nil).GetBoundedArtists), start, end)
}

// GetArtistStat mocks base method
func (m *MockRepository) GetArtistStat(id string) (models.ArtistStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistStat", id)
	ret0, _ := ret[0].(models.ArtistStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistStat indicates an expected call of GetArtistStat
func (mr *MockRepositoryMockRecorder) GetArtistStat(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistStat", reflect.TypeOf((*MockRepository)(nil).GetArtistStat), id)
}

// Search mocks base method
func (m *MockRepository) Search(text string, count uint) ([]models.ArtistSearch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", text, count)
	ret0, _ := ret[0].([]models.ArtistSearch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockRepositoryMockRecorder) Search(text, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockRepository)(nil).Search), text, count)
}
