// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels(in *jlexer.Lexer, out *UserStat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserId = string(in.String())
		case "tracks":
			out.Tracks = uint64(in.Uint64())
		case "albums":
			out.Albums = uint64(in.Uint64())
		case "playlists":
			out.Playlists = uint64(in.Uint64())
		case "artists":
			out.Artists = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels(out *jwriter.Writer, in UserStat) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.UserId))
	}
	{
		const prefix string = ",\"tracks\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Tracks))
	}
	{
		const prefix string = ",\"albums\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Albums))
	}
	{
		const prefix string = ",\"playlists\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Playlists))
	}
	{
		const prefix string = ",\"artists\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Artists))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserStat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserStat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserStat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserStat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels(l, v)
}
func easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels1(in *jlexer.Lexer, out *UserSignIn) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "login":
			out.Login = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels1(out *jwriter.Writer, in UserSignIn) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix[1:])
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserSignIn) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserSignIn) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserSignIn) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserSignIn) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels1(l, v)
}
func easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels2(in *jlexer.Lexer, out *UserSettings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "new_password":
			out.NewPassword = string(in.String())
		case "id":
			out.Id = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "login":
			out.Login = string(in.String())
		case "sex":
			out.Sex = string(in.String())
		case "image":
			out.Image = string(in.String())
		case "email":
			out.Email = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels2(out *jwriter.Writer, in UserSettings) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"new_password\":"
		out.RawString(prefix[1:])
		out.String(string(in.NewPassword))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	if in.Password != "" {
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix)
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"sex\":"
		out.RawString(prefix)
		out.String(string(in.Sex))
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserSettings) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserSettings) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserSettings) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserSettings) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels2(l, v)
}
func easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels3(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "login":
			out.Login = string(in.String())
		case "sex":
			out.Sex = string(in.String())
		case "image":
			out.Image = string(in.String())
		case "email":
			out.Email = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels3(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	if in.Password != "" {
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix)
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"sex\":"
		out.RawString(prefix)
		out.String(string(in.Sex))
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels3(l, v)
}
func easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels4(in *jlexer.Lexer, out *TrackSearch) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.TrackID = string(in.String())
		case "name":
			out.TrackName = string(in.String())
		case "artist":
			out.ArtistName = string(in.String())
		case "artist_id":
			out.ArtistID = string(in.String())
		case "image":
			out.Image = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels4(out *jwriter.Writer, in TrackSearch) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.TrackID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.TrackName))
	}
	{
		const prefix string = ",\"artist\":"
		out.RawString(prefix)
		out.String(string(in.ArtistName))
	}
	{
		const prefix string = ",\"artist_id\":"
		out.RawString(prefix)
		out.String(string(in.ArtistID))
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TrackSearch) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TrackSearch) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TrackSearch) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TrackSearch) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels4(l, v)
}
func easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels5(in *jlexer.Lexer, out *Track) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "artist":
			out.Artist = string(in.String())
		case "duration":
			out.Duration = uint(in.Uint())
		case "image":
			out.Image = string(in.String())
		case "artist_id":
			out.ArtistID = string(in.String())
		case "link":
			out.Link = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels5(out *jwriter.Writer, in Track) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"artist\":"
		out.RawString(prefix)
		out.String(string(in.Artist))
	}
	{
		const prefix string = ",\"duration\":"
		out.RawString(prefix)
		out.Uint(uint(in.Duration))
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	{
		const prefix string = ",\"artist_id\":"
		out.RawString(prefix)
		out.String(string(in.ArtistID))
	}
	{
		const prefix string = ",\"link\":"
		out.RawString(prefix)
		out.String(string(in.Link))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Track) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Track) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Track) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Track) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels5(l, v)
}
func easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels6(in *jlexer.Lexer, out *SearchResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "artists":
			if in.IsNull() {
				in.Skip()
				out.Artists = nil
			} else {
				in.Delim('[')
				if out.Artists == nil {
					if !in.IsDelim(']') {
						out.Artists = make([]ArtistSearch, 0, 1)
					} else {
						out.Artists = []ArtistSearch{}
					}
				} else {
					out.Artists = (out.Artists)[:0]
				}
				for !in.IsDelim(']') {
					var v1 ArtistSearch
					(v1).UnmarshalEasyJSON(in)
					out.Artists = append(out.Artists, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "albums":
			if in.IsNull() {
				in.Skip()
				out.Albums = nil
			} else {
				in.Delim('[')
				if out.Albums == nil {
					if !in.IsDelim(']') {
						out.Albums = make([]AlbumSearch, 0, 1)
					} else {
						out.Albums = []AlbumSearch{}
					}
				} else {
					out.Albums = (out.Albums)[:0]
				}
				for !in.IsDelim(']') {
					var v2 AlbumSearch
					(v2).UnmarshalEasyJSON(in)
					out.Albums = append(out.Albums, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tracks":
			if in.IsNull() {
				in.Skip()
				out.Tracks = nil
			} else {
				in.Delim('[')
				if out.Tracks == nil {
					if !in.IsDelim(']') {
						out.Tracks = make([]TrackSearch, 0, 1)
					} else {
						out.Tracks = []TrackSearch{}
					}
				} else {
					out.Tracks = (out.Tracks)[:0]
				}
				for !in.IsDelim(']') {
					var v3 TrackSearch
					(v3).UnmarshalEasyJSON(in)
					out.Tracks = append(out.Tracks, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels6(out *jwriter.Writer, in SearchResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"artists\":"
		out.RawString(prefix[1:])
		if in.Artists == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v4, v5 := range in.Artists {
				if v4 > 0 {
					out.RawByte(',')
				}
				(v5).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"albums\":"
		out.RawString(prefix)
		if in.Albums == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Albums {
				if v6 > 0 {
					out.RawByte(',')
				}
				(v7).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"tracks\":"
		out.RawString(prefix)
		if in.Tracks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Tracks {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels6(l, v)
}
func easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels7(in *jlexer.Lexer, out *PlaylistsID) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "playlists":
			if in.IsNull() {
				in.Skip()
				out.IDs = nil
			} else {
				in.Delim('[')
				if out.IDs == nil {
					if !in.IsDelim(']') {
						out.IDs = make([]string, 0, 4)
					} else {
						out.IDs = []string{}
					}
				} else {
					out.IDs = (out.IDs)[:0]
				}
				for !in.IsDelim(']') {
					var v10 string
					v10 = string(in.String())
					out.IDs = append(out.IDs, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels7(out *jwriter.Writer, in PlaylistsID) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"playlists\":"
		out.RawString(prefix[1:])
		if in.IDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.IDs {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PlaylistsID) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlaylistsID) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PlaylistsID) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlaylistsID) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels7(l, v)
}
func easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels8(in *jlexer.Lexer, out *PlaylistTracksArray) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "tracks":
			if in.IsNull() {
				in.Skip()
				out.Tracks = nil
			} else {
				in.Delim('[')
				if out.Tracks == nil {
					if !in.IsDelim(']') {
						out.Tracks = make([]Track, 0, 1)
					} else {
						out.Tracks = []Track{}
					}
				} else {
					out.Tracks = (out.Tracks)[:0]
				}
				for !in.IsDelim(']') {
					var v13 Track
					(v13).UnmarshalEasyJSON(in)
					out.Tracks = append(out.Tracks, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels8(out *jwriter.Writer, in PlaylistTracksArray) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"tracks\":"
		out.RawString(prefix)
		if in.Tracks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Tracks {
				if v14 > 0 {
					out.RawByte(',')
				}
				(v15).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PlaylistTracksArray) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlaylistTracksArray) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PlaylistTracksArray) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlaylistTracksArray) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels8(l, v)
}
func easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels9(in *jlexer.Lexer, out *PlaylistTracks) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "playlist_id":
			out.PlaylistID = string(in.String())
		case "track_id":
			out.TrackID = string(in.String())
		case "index":
			out.Index = string(in.String())
		case "image":
			out.Image = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels9(out *jwriter.Writer, in PlaylistTracks) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"playlist_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.PlaylistID))
	}
	{
		const prefix string = ",\"track_id\":"
		out.RawString(prefix)
		out.String(string(in.TrackID))
	}
	if in.Index != "" {
		const prefix string = ",\"index\":"
		out.RawString(prefix)
		out.String(string(in.Index))
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PlaylistTracks) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlaylistTracks) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PlaylistTracks) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlaylistTracks) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels9(l, v)
}
func easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels10(in *jlexer.Lexer, out *Playlist) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "image":
			out.Image = string(in.String())
		case "user_id":
			out.UserId = string(in.String())
		case "private":
			out.Private = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels10(out *jwriter.Writer, in Playlist) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	if in.Image != "" {
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.String(string(in.UserId))
	}
	if in.Private {
		const prefix string = ",\"private\":"
		out.RawString(prefix)
		out.Bool(bool(in.Private))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Playlist) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Playlist) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Playlist) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Playlist) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels10(l, v)
}
func easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels11(in *jlexer.Lexer, out *Artists) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "artists":
			if in.IsNull() {
				in.Skip()
				out.Artists = nil
			} else {
				in.Delim('[')
				if out.Artists == nil {
					if !in.IsDelim(']') {
						out.Artists = make([]Artist, 0, 1)
					} else {
						out.Artists = []Artist{}
					}
				} else {
					out.Artists = (out.Artists)[:0]
				}
				for !in.IsDelim(']') {
					var v16 Artist
					(v16).UnmarshalEasyJSON(in)
					out.Artists = append(out.Artists, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels11(out *jwriter.Writer, in Artists) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"artists\":"
		out.RawString(prefix[1:])
		if in.Artists == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Artists {
				if v17 > 0 {
					out.RawByte(',')
				}
				(v18).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Artists) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Artists) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Artists) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Artists) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels11(l, v)
}
func easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels12(in *jlexer.Lexer, out *ArtistStat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "artist_id":
			out.ArtistId = string(in.String())
		case "tracks":
			out.Tracks = uint64(in.Uint64())
		case "albums":
			out.Albums = uint64(in.Uint64())
		case "subscribers":
			out.Subscribers = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels12(out *jwriter.Writer, in ArtistStat) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"artist_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ArtistId))
	}
	{
		const prefix string = ",\"tracks\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Tracks))
	}
	{
		const prefix string = ",\"albums\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Albums))
	}
	{
		const prefix string = ",\"subscribers\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Subscribers))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ArtistStat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ArtistStat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ArtistStat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ArtistStat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels12(l, v)
}
func easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels13(in *jlexer.Lexer, out *ArtistSearch) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ArtistID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "image":
			out.Image = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels13(out *jwriter.Writer, in ArtistSearch) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ArtistID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ArtistSearch) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ArtistSearch) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ArtistSearch) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ArtistSearch) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels13(l, v)
}
func easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels14(in *jlexer.Lexer, out *Artist) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "image":
			out.Image = string(in.String())
		case "genre":
			out.Genre = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels14(out *jwriter.Writer, in Artist) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	{
		const prefix string = ",\"genre\":"
		out.RawString(prefix)
		out.String(string(in.Genre))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Artist) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Artist) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Artist) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Artist) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels14(l, v)
}
func easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels15(in *jlexer.Lexer, out *AlbumSearch) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.AlbumID = string(in.String())
		case "name":
			out.AlbumName = string(in.String())
		case "artist_id":
			out.ArtistID = string(in.String())
		case "artist_name":
			out.ArtistName = string(in.String())
		case "image":
			out.Image = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels15(out *jwriter.Writer, in AlbumSearch) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.AlbumID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.AlbumName))
	}
	{
		const prefix string = ",\"artist_id\":"
		out.RawString(prefix)
		out.String(string(in.ArtistID))
	}
	{
		const prefix string = ",\"artist_name\":"
		out.RawString(prefix)
		out.String(string(in.ArtistName))
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AlbumSearch) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AlbumSearch) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AlbumSearch) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AlbumSearch) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels15(l, v)
}
func easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels16(in *jlexer.Lexer, out *Album) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "image":
			out.Image = string(in.String())
		case "release":
			out.Release = string(in.String())
		case "artist_name":
			out.ArtistName = string(in.String())
		case "artist_id":
			out.ArtistId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels16(out *jwriter.Writer, in Album) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	{
		const prefix string = ",\"release\":"
		out.RawString(prefix)
		out.String(string(in.Release))
	}
	{
		const prefix string = ",\"artist_name\":"
		out.RawString(prefix)
		out.String(string(in.ArtistName))
	}
	{
		const prefix string = ",\"artist_id\":"
		out.RawString(prefix)
		out.String(string(in.ArtistId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Album) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Album) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Album) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Album) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubCom20201NoHomomorphismNoHomoMainInternalPkgModels16(l, v)
}
