// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package track is a generated GoMock package.
package track

import (
	gomock "github.com/golang/mock/gomock"
	models "no_homomorphism/internal/pkg/models"
	reflect "reflect"
)

// MockUseCase is a mock of UseCase interface
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// GetTrackById mocks base method
func (m *MockUseCase) GetTrackById(id string) (models.Track, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrackById", id)
	ret0, _ := ret[0].(models.Track)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrackById indicates an expected call of GetTrackById
func (mr *MockUseCaseMockRecorder) GetTrackById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrackById", reflect.TypeOf((*MockUseCase)(nil).GetTrackById), id)
}

// GetBoundedTracksByAlbumId mocks base method
func (m *MockUseCase) GetTracksByAlbumId(id string) ([]models.Track, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoundedTracksByAlbumId", id)
	ret0, _ := ret[0].([]models.Track)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoundedTracksByAlbumId indicates an expected call of GetBoundedTracksByAlbumId
func (mr *MockUseCaseMockRecorder) GetTracksByAlbumId(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoundedTracksByAlbumId", reflect.TypeOf((*MockUseCase)(nil).GetTracksByAlbumId), id)
}

// GetTracksByPlaylistId mocks base method
func (m *MockUseCase) GetTracksByPlaylistId(id string) ([]models.Track, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTracksByPlaylistId", id)
	ret0, _ := ret[0].([]models.Track)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTracksByPlaylistId indicates an expected call of GetTracksByPlaylistId
func (mr *MockUseCaseMockRecorder) GetTracksByPlaylistId(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTracksByPlaylistId", reflect.TypeOf((*MockUseCase)(nil).GetTracksByPlaylistId), id)
}
